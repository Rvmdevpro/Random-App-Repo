{"ast":null,"code":"var _jsxFileName = \"/Users/rubenvelez/ReactProject/random-app/src/Components/Characters.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Characters() {\n  _s();\n\n  //const [characters, setCharacters] = useState([])\n  const fetchCharacters = async () => {\n    const response = await fetch(\"https://randomuser.me/api/\");\n    return response.json();\n  };\n\n  const {\n    data,\n    status\n  } = useQuery(\"characters\", fetchCharacters);\n\n  if (status === \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 14\n    }, this);\n  }\n\n  if (status === \"error\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.results.map(character => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: character.name.first\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Characters, \"sKspZixowNmylqk0M9YpZYW9OHw=\", false, function () {\n  return [useQuery];\n});\n\n_c = Characters;\n\nvar _c;\n\n$RefreshReg$(_c, \"Characters\");","map":{"version":3,"names":["React","useQuery","Characters","fetchCharacters","response","fetch","json","data","status","results","map","character","name","first"],"sources":["/Users/rubenvelez/ReactProject/random-app/src/Components/Characters.tsx"],"sourcesContent":["import React from 'react'\nimport {useQuery} from \"react-query\"\n\n\nexport default function Characters() {\n   \n    //const [characters, setCharacters] = useState([])\nconst fetchCharacters  = async () => {\n        const response = await fetch (\"https://randomuser.me/api/\")\n        return response.json();\n    };\n    const {data, status} =useQuery(\"characters\", fetchCharacters)\n\n    if(status === \"loading\"){\n      return <div>Loading</div>\n    }\n    if(status === \"error\"){\n      return <div>error</div>\n    }\n  \n  return (\n    <div>\n   {data.results.map((character: any)=>\n   (<div>{character.name.first}</div>))}\n    </div>\n  );\n  }\n  \n\n\n\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAGA,eAAe,SAASC,UAAT,GAAsB;EAAA;;EAEjC;EACJ,MAAMC,eAAe,GAAI,YAAY;IAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4BAAF,CAA5B;IACA,OAAOD,QAAQ,CAACE,IAAT,EAAP;EACH,CAHL;;EAII,MAAM;IAACC,IAAD;IAAOC;EAAP,IAAgBP,QAAQ,CAAC,YAAD,EAAeE,eAAf,CAA9B;;EAEA,IAAGK,MAAM,KAAK,SAAd,EAAwB;IACtB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACD,IAAGA,MAAM,KAAK,OAAd,EAAsB;IACpB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAEH,oBACE;IAAA,UACAD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,SAAD,iBACjB;MAAA,UAAMA,SAAS,CAACC,IAAV,CAAeC;IAArB;MAAA;MAAA;MAAA;IAAA,QADA;EADA;IAAA;IAAA;IAAA;EAAA,QADF;AAMC;;GAtBqBX,U;UAOED,Q;;;KAPFC,U"},"metadata":{},"sourceType":"module"}
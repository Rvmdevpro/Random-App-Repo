{"ast":null,"code":"var _jsxFileName = \"/Users/rubenvelez/ReactProject/random-app/src/Components/Characters.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Characters() {\n  _s();\n\n  const fetchPeople = async () => {\n    const response = await fetch(\"https://randomuser.me/api/?results=5\");\n    return response.json();\n  };\n\n  const {\n    data,\n    status\n  } = useQuery(\"people\", fetchPeople);\n\n  if (status === \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (status === \"error\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.results.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.name.first\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Characters, \"Zxg8aNMC5DxRjb5USqHcIq+KPKs=\", false, function () {\n  return [useQuery];\n});\n\n_c = Characters;\n\nvar _c;\n\n$RefreshReg$(_c, \"Characters\");","map":{"version":3,"names":["React","useQuery","Characters","fetchPeople","response","fetch","json","data","status","results","map","person","name","first"],"sources":["/Users/rubenvelez/ReactProject/random-app/src/Components/Characters.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {useQuery} from \"react-query\"\nimport { ResultsEntity } from './RandomUserInterface';\n\n\nexport default function Characters() {\n   \n        \n\n        \n        const fetchPeople  = async () => {\n        const response = await fetch (\"https://randomuser.me/api/?results=5\")\n        return response.json();\n        \n\n\n    };\n        const{data,status}= useQuery(\"people\", fetchPeople)\n\n      if (status===\"loading\"){\n        return <div>Loading...</div>\n      }\n      if (status===\"error\"){\n        return <div>Error</div>\n      }\n    return (\n\n\n      <div>\n       {data.results.map((person: ResultsEntity)=>(\n         <div>{person.name.first}</div>\n       ))}\n      </div>\n    )\n  }\n  \n  \n\n\n\n\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAIA,eAAe,SAASC,UAAT,GAAsB;EAAA;;EAK7B,MAAMC,WAAW,GAAI,YAAY;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAF,CAA5B;IACA,OAAOD,QAAQ,CAACE,IAAT,EAAP;EAIH,CANG;;EAOA,MAAK;IAACC,IAAD;IAAMC;EAAN,IAAeP,QAAQ,CAAC,QAAD,EAAWE,WAAX,CAA5B;;EAEF,IAAIK,MAAM,KAAG,SAAb,EAAuB;IACrB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACD,IAAIA,MAAM,KAAG,OAAb,EAAqB;IACnB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACH,oBAGE;IAAA,UACED,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,MAAD,iBAChB;MAAA,UAAMA,MAAM,CAACC,IAAP,CAAYC;IAAlB;MAAA;MAAA;MAAA;IAAA,QADD;EADF;IAAA;IAAA;IAAA;EAAA,QAHF;AASD;;GA7BqBX,U;UAYID,Q;;;KAZJC,U"},"metadata":{},"sourceType":"module"}